package server.util;

public class Map {

    //flipping index for black pieces

    //rank = pieceIndex / 8
    //file = pieceIndex % 8
    //newRank = 7 - rank
    //newIndex = pieceIndex % 8 + (7 - pieceIndex / 8) * 8


    public static final float[] PAWN = new float[]

            {
                    0,  0,  0,  0,  0,  0,  0,  0,
                    5, 5, 5, 5, 5, 5, 5, 5,
                    1, 1, 2, 3, 3, 2, 1, 1,
                    .5f,  .5f, 1, 2.5f, 2.5f, 1,  .5f,  .5f,
                    0,  0,  0, 2, 2,  0,  0,  0,
                    .5f, -.5f,-1,  0,  0,-1, -.5f,  .5f,
                    .5f, 1, 1,-2.5f,-2.5f, 1, 1,  .5f,
                    0,  0,  0,  0,  0,  0,  0,  0
            };

//            {
//                    5, 5, 5, 5, 5, 5, 5, 5,
//                    2, 2, 3, 3.5f, 3.5f, 3, 2, 2,
//                    1.5f, 1.5f, 1.5f, 2.5f, 2.5f, 2, 1.5f, 1.5f,
//                    1, 1, 1, 2, 2, 1, 1, 1,
//                    .5f, .5f, 2, 2, 2, .5f, .5f, .5f,
//                    0, 0, 0, 1, 1, 0, 0, 0,
//                    -0.3f, -0.3f, -0.3f, -0.55f, -0.55f, -0.3f, -0.3f, -0.3f,
//                    0, 0, 0, 0, 0, 0, 0, 0
//            };

    // knight positional score
    public static final float[] KNIGHT = new float[]
            {
                    -5,-3.5f,-3,-3,-3,-3,-3.5f,-5,
                    -4,-2,  0,  0,  0,  0,-2,-4,
                    -3,  0, 1, 1.5f, 1.5f, 1,  0,-3,
                    -3,  .5f, 1.5f, 2, 2, 1.5f,  .5f,-3,
                    -3,  0, 1.5f, 2.0f, 2.0f, 1.5f,  0,-3.0f,
                    -3,  .5f, 1.0f, 1.5f, 1.5f, 1.0f,  .5f,-3,
                    -4,-2.0f,  0,  .5f,  .5f,  0,-2.0f,-4.0f,
                    -5,-2.5f,-3,-3,-3,-3,-2.5f,-5,
            };


//            {
//                    -.5f, 0, 0, 0, 0, 0, 0, -.5f,
//                    -.5f, 0, 0, 1, 1, 0, 0, -.5f,
//                    -.5f, .5f, 2, 2, 2, 2, .5f, -.5f,
//                    -.5f, 1, 2, 2.5f, 2.5f, 2, 1, -.5f,
//                    -.5f, 1, 2, 2.5f, 2.5f, 2, 1, -.5f,
//                    -.5f, .5f, 2, 1, 1, 2, .5f, -.5f,
//                    -.5f, 0, 0, 0, 0, 0, 0, -.5f,
//                    -.5f, -0.5f, 0, 0, 0, 0, -0.5f, -.5f
//            };

    // bishop positional score
    public static final float[] BISHOP = new float[]

            {
                    -2,-1,-1,-1,-1,-1,-1,-2,
                    -1,  0,  0,  0,  0,  0,  0,-1,
                    -1,  0,  .5f, 1.0f, 1.0f,  .5f,  0,-1.0f,
                    -1,  .5f,  .5f, 1, 1.0f,  .5f,  .5f,-1,
                    -1,  0, 1, 1, 1, 1,  0,-1.0f,
                    -1, 1, 1, 1, 1, 1, 1,-1,
                    -1,  .5f,  0,  0,  0,  0,  .5f,-1.0f,
                    -2,-1,-1,1,-1,-1,-1,-2,

            };

//            {
//                    0, 0, 0, 0, 0, 0, 0, 0,
//                    0, 0, 0, 0, 0, 0, 0, 0,
//                    0, 0, 0, 1, 1, 0, 0, 0,
//                    0, 0, 1, 1.5f, 1.5f, 1, 0, 0,
//                    0, 0, 1, 1.5f, 1.5f, 1, 0, 0,
//                    0, 1, 0, 0, 0, 0, 1, 0,
//                    0, 1.7f, 0, 0, 0, 0, 1.7f, 0,
//                    0, 0, -1f, 0, 0, -1f, 0, 0
//
//            };

    // rook positional score
    public static final float[] ROOK = new float[]


            {
                    0,  0,  0,  0,  0,  0,  0,  0,
                    .5f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f,  .5f,
                    -.5f,  0,  0,  0,  0,  0,  0, -.5f,
                    -.5f,  0,  0,  0,  0,  0,  0, -.5f,
                    -.5f,  0,  0,  0,  0,  0,  0, -.5f,
                    -.5f,  0,  0,  0,  0,  0,  0, -.5f,
                    -.5f,  0,  0,  0,  0,  0,  0, -.5f,
                    0,  0,  0,  .5f,  .5f,  0,  0,  0
            };

//            {
//                    4, 4, 4, 4, 4, 4, 4, 4,
//                    4, 4, 4, 4, 4, 4, 4, 4,
//                    0, 0, 1, 2, 2, 1, 0, 0,
//                    0, 0, 1, 2, 2, 1, 0, 0,
//                    0, 0, 1, 2, 2, 1, 0, 0,
//                    0, 0, 1, 2, 2, 1, 0, 0,
//                    0, 0, 1, 2, 2, 1, 0, 0,
//                    0, 0, 0, 1.5f, 0, 1.5f, 0, 0
//
//            };


}